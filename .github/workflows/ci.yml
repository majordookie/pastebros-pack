name: CI

on:
  schedule:
    - cron: '* */4 * * *'
  push:
    branches:
      - "release/*"
  workflow_dispatch:

jobs:
  create_patch_release:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Fetch all branches
        run: git fetch --all

      - name: Determine New Branch Name
        id: new_branch
        run: |
          LATEST_BRANCH=$(git branch -r | grep 'origin/release/' | sort -Vr | head -n 1 | sed 's/[ \t]*origin\/release\///' | tr -d '\n')
          IFS='.' read -ra VERSION <<< "$LATEST_BRANCH"
          ((VERSION[2]++))
          NEW_VERSION="${VERSION[0]}.${VERSION[1]}.${VERSION[2]}"
          echo "Next branch name is ${VERSION[0]}.${VERSION[1]}.${VERSION[2]}"
          echo "NEW_BRANCH=release/$NEW_VERSION" >> $GITHUB_ENV

      - name: Create and Push New Branch
        run: |
          git checkout -b ${{ env.NEW_BRANCH }}
          git push origin ${{ env.NEW_BRANCH }}
          
  build_modpack:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'schedule' && needs.create_patch_release.result == 'success') ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/') && contains(github.ref, '/release/'))
    needs: [create_patch_release]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Fetch all branches
        run: git fetch --all
        
      - name: Extract Version from Branch Name
        run: |
          LATEST_BRANCH=$(git branch -r | grep 'origin/release/' | sort -Vr | head -n 1 | sed 's/[ \t]*origin\/release\///' | tr -d '\n')
          echo "LATEST_BRANCH=$LATEST_BRANCH"
          echo "VERSION=$LATEST_BRANCH" >> $GITHUB_ENV
          echo "VERSION set to $LATEST_BRANCH"

      - name: "Update deps in manifest.json"
        run: |
          MODS_JSON=$(cat mods.json)
          DEPENDENCIES=()
          for row in $(echo "${MODS_JSON}" | jq -r '.mods[] | @base64'); do
              _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
              }

              MOD_NAME=$(_jq '.name')
              AUTHOR_NAME=$(_jq '.author')
              LATEST_VERSION=$(curl -s "https://thunderstore.io/api/experimental/package/${AUTHOR_NAME}/${MOD_NAME}/" | jq -r '.latest.version_number')
              DEPENDENCIES+=("\"${AUTHOR_NAME}-${MOD_NAME}-${LATEST_VERSION}\"")
              echo "Updating dep to ${AUTHOR_NAME}-${MOD_NAME}-${LATEST_VERSION}"
          done

          echo "{
            \"name\": \"pastebros\",
            \"version_number\": \"${VERSION}\",
            \"website_url\": \"https://github.com/majordookie/pastebros-pack\",
            \"description\": \"Mod pack for the paste bros\",
            \"dependencies\": [$(IFS=, ; echo "${DEPENDENCIES[*]}")]
          }" | jq > manifest.json

      - name: Package Files
        run: |
          zip pastebros-${{ env.VERSION }}.zip manifest.json README.md && zip -j pastebros-${{ env.VERSION }}.zip resources/icon.png

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pastebros-${{ env.VERSION }}.zip
          asset_name: pastebros-${{ env.VERSION }}.zip
          asset_content_type: application/zip
          
      - name: Upload to Thunderstore
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.THUNDERSTORE_API_KEY }}" -H "Content-Type: multipart/form-data" -F 'metadata={"author_name": "pastebros", "has_nsfw_content": false, "categories": ["modpacks"], "communities": ["lethal-company"]}' -F "file=@./pastebros-${{ env.VERSION }}.zip" "https://thunderstore.io/api/experimental/submission/upload/"
